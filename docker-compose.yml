x-networks-proxy: &networks-proxy
  networks:
    - proxy

x-environment: &environment
  environment:
    - TZ=$TZ
    - PUID=$PUID
    - PGID=$PGID

x-security: &security
  security_opt:
    - no-new-privileges:true

x-proxy-labels: &proxy-labels
  traefik.enable: true
  traefik.docker.network: "proxy"

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      # listen on host ports without ingress network
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - 8080:8080 # Dashbaord WebGui
    networks:
      - proxy
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/letsencrypt
      - ./traefik/usersfile.txt:/usersfile.txt
      - ./traefik/config.yml:/config.yml
      # - ./traefik/traefik.yml:/traefik.yml
    command:
      - --api.dashboard=true
      - --log.level=DEBUG
      - --accesslog=true
      - --providers.docker.exposedByDefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entryPoints.http.http.redirections.entrypoint.scheme=https
      - --entrypoints.https.address=:443
      - --entrypoints.https.asDefault=true
      # Set up LetsEncrypt certificate resolver
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=20
      - --certificatesresolvers.letsencrypt.acme.email=${CERT_MAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      # # staging environment of LE, remove for real certs
      # - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # Set up the TLS configuration for our https listener
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certResolver=letsencrypt
      - --entrypoints.https.http.tls.domains[0].main=${MAIN_DOMAIN}
      - --entrypoints.https.http.tls.domains[0].sans=${SANS_DOMAIN}
    labels:
      - traefik.enable=true
      - "traefik.http.routers.dashboard.rule=Host(`traefik.tacodogs.org`)"
      - traefik.http.routers.dashboard.entrypoints=https
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.middlewares=myauth
      - "traefik.http.middlewares.myauth.basicauth.usersFile=/usersfile.txt"
  cloudflare-ddns:
    image: timothyjmiller/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: unless-stopped
    <<: *security
    network_mode: 'host'
    environment:
      - PUID=$DOCKERUSERNAME
      - PGID=$DOCKERUSERGROUP
    volumes:
      - ./cloudflare-ddns/config.json:/config.json

  # plex:
  #   image: lscr.io/linuxserver/plex:latest
  #   container_name: plex
  #   restart: unless-stopped
  #   <<: [*networks-proxy, *environment]
  #   environment:
  #     - PLEX_SQLITE_MEMORY_LIMIT_MB=2048
  #   volumes:
  #     - ./config/plexdata/config:/config
  #     - ./config/transcode:/transcode
  #     - $MEDIADIR:/data/media
  #   ports:
  #     - "32400:32400/tcp"
  #     - "3005:3005/tcp"
  #     - "8324:8324/tcp"
  #     - "32469:32469/tcp"
  #     - "1900:1900/udp"
  #     - "32410:32410/udp"
  #     - "32412-32414:32412-32414/udp"
  #   labels:
  #     <<: *proxy-labels
  #     traefik.http.routers.plex.entrypoints: "http"
  #     traefik.http.routers.plex.rule: "Host(`plex.${PRIVATE_HOSTNAME}`)"
  #     traefik.http.middlewares.plex-https-redirect.redirectscheme.scheme: "https"
  #     traefik.http.routers.plex.middlewares: "plex-https-redirect"
  #     traefik.http.routers.plex-secure.entrypoints: "https"
  #     traefik.http.routers.plex-secure.rule: "Host(`plex.${PRIVATE_HOSTNAME}`)"
  #     traefik.http.routers.plex-secure.tls: "true"
  #     traefik.http.routers.plex-secure.service: "plex"
  #     traefik.http.services.plex.loadbalancer.server.port: "32400"
  #   devices:
  #     - /dev/dri:/dev/dri
  #   privileged: true
  #   pull_policy: always
  tdarr:
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    restart: unless-stopped
    network_mode: bridge
    ports:
      - 8265:8265 # Web UI
      - 8266:8266 # Server port
    environment:
      - TZ=Europe/London
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=7
      - nodeName=MyInternalNode
    volumes:
      - ./config/tdarr/server:/app/server
      - ./config/tdarr/configs:/app/configs
      - ./config/tdarr/logs:/app/logs
      - $MEDIADIR:/media
      - $MEDIADIR/tdarr_cache:/temp

  tdarr-node:
    container_name: tdarr-node
    image: ghcr.io/haveagitgat/tdarr_node:latest
    restart: unless-stopped
    network_mode: service:tdarr
    environment:
      - TZ=Europe/London
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
      - nodeName=MyExternalNode
      - serverIP=0.0.0.0
      - serverPort=8266
      - inContainer=true
      - ffmpegVersion=7
    volumes:
      - ./config/tdarr/configs:/app/configs
      - ./config/tdarr/logs:/app/logs
      - $MEDIADIR:/media
      - $MEDIADIR/tdarr_cache:/temp
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    ports:
      - 7878:7878
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/radarr:/config
      - $MEDIADIR:/data
    labels:
      <<: *proxy-labels
      traefik.http.routers.radarr.entrypoints: "http"
      traefik.http.routers.radarr.rule: "Host(`radarr.${PRIVATE_HOSTNAME}`)"
      traefik.http.middlewares.radarr-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.radarr.middlewares: "radarr-https-redirect"
      traefik.http.routers.radarr-secure.entrypoints: "https"
      traefik.http.routers.radarr-secure.rule: "Host(`radarr.${PRIVATE_HOSTNAME}`)"
      traefik.http.routers.radarr-secure.tls: "true"
      traefik.http.routers.radarr-secure.service: "radarr"
      traefik.http.services.radarr.loadbalancer.server.port: "7878"
    pull_policy: always
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    ports:
      - 8989:8989
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/sonarr:/config
      - $MEDIADIR:/data
    labels:
      <<: *proxy-labels
      traefik.http.routers.sonarr.entrypoints: "http"
      traefik.http.routers.sonarr.rule: "Host(`sonarr.${PRIVATE_HOSTNAME}`)"
      traefik.http.middlewares.sonarr-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.sonarr.middlewares: "sonarr-https-redirect"
      traefik.http.routers.sonarr-secure.entrypoints: "https"
      traefik.http.routers.sonarr-secure.rule: "Host(`sonarr.${PRIVATE_HOSTNAME}`)"
      traefik.http.routers.sonarr-secure.tls: "true"
      traefik.http.routers.sonarr-secure.service: "sonarr"
      traefik.http.services.sonarr.loadbalancer.server.port: "8989"
    pull_policy: always
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    ports:
      - 6767:6767
    volumes:
      - ./config/bazarr:/config
      - $MEDIADIR:/data/media
    labels:
      <<: *proxy-labels
      traefik.http.routers.bazarr.entrypoints: "http"
      traefik.http.routers.bazarr.rule: "Host(`bazarr.${PRIVATE_HOSTNAME}`)"
      traefik.http.middlewares.bazarr-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.bazarr.middlewares: "bazarr-https-redirect"
      traefik.http.routers.bazarr-secure.entrypoints: "https"
      traefik.http.routers.bazarr-secure.rule: "Host(`bazarr.${PRIVATE_HOSTNAME}`)"
      traefik.http.routers.bazarr-secure.tls: "true"
      traefik.http.routers.bazarr-secure.service: "bazarr"
      traefik.http.services.bazarr.loadbalancer.server.port: "6767"
    pull_policy: always
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    ports:
      - 8081:8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/sabnzbd:/config
      - $MEDIADIR/usenet:/data/usenet:rw
    labels:
      <<: *proxy-labels
      traefik.http.routers.sabnzbd.entrypoints: "http"
      traefik.http.routers.sabnzbd.rule: "Host(`sabnzbd.${PRIVATE_HOSTNAME}`)"
      traefik.http.middlewares.sabnzbd-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.sabnzbd.middlewares: "sabnzbd-https-redirect"
      traefik.http.routers.sabnzbd-secure.entrypoints: "https"
      traefik.http.routers.sabnzbd-secure.rule: "Host(`sab.${PRIVATE_HOSTNAME}`)"
      traefik.http.routers.sabnzbd-secure.tls: "true"
      traefik.http.routers.sabnzbd-secure.service: "sabnzbd"
      traefik.http.services.sabnzbd.loadbalancer.server.port: "8080"
    pull_policy: always
  organizr:
    image: organizr/organizr:latest
    container_name: organizr
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/organizr:/config
    labels:
      <<: *proxy-labels
      traefik.http.routers.organizr.entrypoints: "http"
      traefik.http.routers.organizr.rule: "Host(`organizr.${PRIVATE_HOSTNAME}`)"
      traefik.http.middlewares.organizr-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.organizr.middlewares: "organizr-https-redirect"
      traefik.http.routers.organizr-secure.entrypoints: "https"
      traefik.http.routers.organizr-secure.rule: "Host(`organizr.${PRIVATE_HOSTNAME}`)"
      traefik.http.routers.organizr-secure.tls: "true"
      traefik.http.routers.organizr-secure.service: "organizr"
      traefik.http.services.organizr.loadbalancer.server.port: "80"
    pull_policy: always
  overseerr:
    image: lscr.io/linuxserver/overseerr
    container_name: overseerr
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    labels:
      <<: *proxy-labels
      traefik.http.routers.overseerr.entrypoints: "http"
      traefik.http.routers.overseerr.rule: "Host(`media.${PUBLIC_HOSTNAME}`)"
      traefik.http.middlewares.overseerr-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.overseerr.middlewares: "overseerr-https-redirect"
      traefik.http.routers.overseerr-secure.entrypoints: "https"
      traefik.http.routers.overseerr-secure.rule: "Host(`media.${PUBLIC_HOSTNAME}`)"
      traefik.http.routers.overseerr-secure.tls: "true"
      traefik.http.routers.overseerr-secure.service: "overseerr"
      traefik.http.services.overseerr.loadbalancer.server.port: "5055"
    volumes:
      - ./config/overseerr:/config
    pull_policy: always
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    restart: unless-stopped
    <<: [*networks-proxy, *environment]
    ports:
      - 8181:8181
    labels:
      <<: *proxy-labels
      traefik.http.routers.tautulli.entrypoints: "http"
      traefik.http.routers.tautulli.rule: "Host(`history.${PUBLIC_HOSTNAME}`)"
      traefik.http.middlewares.tautulli-https-redirect.redirectscheme.scheme: "https"
      traefik.http.routers.tautulli.middlewares: "tautulli-https-redirect"
      traefik.http.routers.tautulli-secure.entrypoints: "https"
      traefik.http.routers.tautulli-secure.rule: "Host(`history.${PUBLIC_HOSTNAME}`)"
      traefik.http.routers.tautulli-secure.tls: "true"
      traefik.http.routers.tautulli-secure.service: "tautulli"
      traefik.http.services.tautulli.loadbalancer.server.port: "8181"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/tautulli:/config
      - ./config/plexdata/config/Library/Application Support/Plex Media Server/Logs:/logs:ro
    pull_policy: always
  # qbittorrent:
  #   image: lscr.io/linuxserver/qbittorrent:latest
  #   container_name: qbittorrent
  #   restart: unless-stopped
  #   <<: [*networks-proxy]
  #   volumes:
  #     - ./config/qbittorrent:/config
  #     - $MEDIADIR/torrents:/data/torrents
  #   labels:
  #     <<: *proxy-labels
  #     traefik.http.routers.qb.entrypoints: "http"
  #     traefik.http.routers.qb.rule: "Host(`qb.${PRIVATE_HOSTNAME}`)"
  #     traefik.http.middlewares.qb-https-redirect.redirectscheme.scheme: "https"
  #     traefik.http.routers.qb.middlewares: "qb-https-redirect"
  #     traefik.http.routers.qb-secure.entrypoints: "https"
  #     traefik.http.routers.qb-secure.rule: "Host(`qb.${PRIVATE_HOSTNAME}`)"
  #     traefik.http.routers.qb-secure.tls: "true"
  #     traefik.http.routers.qb-secure.service: "qb"
  #     traefik.http.services.qb.loadbalancer.server.port: "8090"
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PUID
  #     - TZ=$TZ
  #     - WEBUI_PORT=8090
  #   pull_policy: always
networks:
  proxy:
    name: proxy
    external: true
